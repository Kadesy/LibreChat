services:
  api:
    image: ghcr.io/danny-avila/librechat-dev-api:latest
    container_name: LibreChat-API
    depends_on:
      - mongodb
      - rag_api
    restart: always
    extra_hosts:
    - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - HOST=0.0.0.0
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - RAG_PORT=${RAG_PORT:-8000}
      - RAG_API_URL=http://rag_api:${RAG_PORT:-8000}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - type: bind
        source: ./librechat.yaml
        target: /app/librechat.yaml
      - ./images:/app/client/public/images
      - ./images/logo.png:/app/client/public/assets/logo.png
      - ./images/logo.svg:/app/client/public/assets/logo.svg
      - ./uploads:/app/uploads
      - ./logs:/app/api/logs

    labels:
      # HTTPS Router
      - "traefik.enable=true"
      - "traefik.http.routers.librechat.rule=Host(`ai.kadn.io`)"
      - "traefik.http.routers.librechat.entrypoints=websecure"
      - "traefik.http.routers.librechat.tls=true"
      - "traefik.http.routers.librechat.tls.certresolver=letsencrypt"
      
      # Service configuration with WebSocket support
      - "traefik.http.services.librechat.loadbalancer.server.port=3080"
      - "traefik.http.services.librechat.loadbalancer.responseforwarding.flushinterval=100ms"
      - "traefik.http.services.librechat.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.librechat.loadbalancer.sticky.cookie.name=librechat_session"
      - "traefik.http.services.librechat.loadbalancer.sticky.cookie.secure=true"
      - "traefik.http.services.librechat.loadbalancer.sticky.cookie.httpOnly=true"
      - "traefik.http.services.librechat.loadbalancer.sticky.cookie.sameSite=lax"
      
      # HTTP to HTTPS Redirect
      - "traefik.http.routers.librechat-http.rule=Host(`ai.kadn.io`)"
      - "traefik.http.routers.librechat-http.entrypoints=web"
      - "traefik.http.routers.librechat-http.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      
      # Security Headers
      - "traefik.http.middlewares.librechat-security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.librechat-security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.librechat-security.headers.stsPreload=true"
      - "traefik.http.middlewares.librechat-security.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.librechat-security.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.librechat-security.headers.browserXssFilter=true"
      - "traefik.http.middlewares.librechat-security.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.librechat-security.headers.permissionsPolicy=camera=(), microphone=(), geolocation=(), interest-cohort=()"
      
      # CORS and Cookie headers for persistence
      - "traefik.http.middlewares.librechat-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.librechat-headers.headers.customrequestheaders.X-Forwarded-Host=ai.kadn.io"
      - "traefik.http.middlewares.librechat-headers.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.librechat-headers.headers.accesscontrolalloworiginlist=https://ai.kadn.io"
      
      # Compression
      - "traefik.http.middlewares.librechat-compress.compress=true"
      
      # Apply all middlewares
      - "traefik.http.routers.librechat.middlewares=librechat-security,librechat-compress,librechat-headers"

  mongodb:
    container_name: chat-mongodb
    image: mongo
    restart: always
    volumes:
      - ./data-node:/data/db
    command: mongod --noauth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  meilisearch:
    container_name: chat-meilisearch
    image: getmeili/meilisearch:v1.12.3
    restart: always
    env_file:
      - .env
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
    volumes:
      - ./meili_data_v1.12:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-H", "Authorization: Bearer ${MEILI_MASTER_KEY}", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  vectordb:
    image: pgvector/pgvector:0.8.0-pg15-trixie
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    restart: always
    volumes:
      - pgdata2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 30s
      timeout: 10s
      retries: 3

  rag_api:
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:latest
    environment:
      - DB_HOST=vectordb
      - RAG_PORT=${RAG_PORT:-8000}
    restart: always
    depends_on:
      vectordb:
        condition: service_healthy
    env_file:
      - .env

volumes:
  pgdata2:

networks:
  default:
    name: kadn_webapps_network
    external: true

